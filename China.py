#! /usr/bin/env python

import matplotlib
import matplotlib.pyplot as plt
import sys

# Source: https://www.ssa.gov/oact/STATS/table4c6.html
# Each line is a year of life.  Fields:
# Male death probability, Male #lives, Male life expectancy,
# Female death probability, Female #lives, Female life expectancy
period_life_table = [
    [0.006569, 100000, 76.18, 0.005513, 100000, 80.95],
    [0.000444, 99343, 75.69, 0.000382, 99449, 80.39],
    [0.000291, 99299, 74.72, 0.000218, 99411, 79.42],
    [0.000226, 99270, 73.74, 0.000166, 99389, 78.44],
    [0.000173, 99248, 72.76, 0.000143, 99373, 77.45],
    [0.000158, 99230, 71.77, 0.000127, 99358, 76.47],
    [0.000147, 99215, 70.78, 0.000116, 99346, 75.48],
    [0.000136, 99200, 69.79, 0.000106, 99334, 74.48],
    [0.000121, 99187, 68.80, 0.000098, 99324, 73.49],
    [0.000104, 99175, 67.81, 0.000091, 99314, 72.50],
    [0.000092, 99164, 66.82, 0.000086, 99305, 71.51],
    [0.000097, 99155, 65.82, 0.000089, 99296, 70.51],
    [0.000134, 99146, 64.83, 0.000102, 99288, 69.52],
    [0.000210, 99132, 63.84, 0.000128, 99277, 68.52],
    [0.000317, 99112, 62.85, 0.000164, 99265, 67.53],
    [0.000433, 99080, 61.87, 0.000205, 99248, 66.54],
    [0.000547, 99037, 60.90, 0.000246, 99228, 65.56],
    [0.000672, 98983, 59.93, 0.000285, 99204, 64.57],
    [0.000805, 98917, 58.97, 0.000319, 99175, 63.59],
    [0.000941, 98837, 58.02, 0.000350, 99144, 62.61],
    [0.001084, 98744, 57.07, 0.000383, 99109, 61.63],
    [0.001219, 98637, 56.13, 0.000417, 99071, 60.66],
    [0.001314, 98517, 55.20, 0.000446, 99030, 59.68],
    [0.001357, 98387, 54.27, 0.000469, 98986, 58.71],
    [0.001362, 98254, 53.35, 0.000487, 98939, 57.74],
    [0.001353, 98120, 52.42, 0.000505, 98891, 56.76],
    [0.001350, 97987, 51.49, 0.000525, 98841, 55.79],
    [0.001353, 97855, 50.56, 0.000551, 98789, 54.82],
    [0.001371, 97722, 49.63, 0.000585, 98735, 53.85],
    [0.001399, 97588, 48.69, 0.000626, 98677, 52.88],
    [0.001432, 97452, 47.76, 0.000672, 98615, 51.92],
    [0.001464, 97312, 46.83, 0.000720, 98549, 50.95],
    [0.001497, 97170, 45.90, 0.000766, 98478, 49.99],
    [0.001530, 97024, 44.96, 0.000806, 98403, 49.02],
    [0.001568, 96876, 44.03, 0.000846, 98323, 48.06],
    [0.001617, 96724, 43.10, 0.000891, 98240, 47.10],
    [0.001682, 96568, 42.17, 0.000946, 98153, 46.15],
    [0.001759, 96405, 41.24, 0.001013, 98060, 45.19],
    [0.001852, 96236, 40.31, 0.001094, 97960, 44.23],
    [0.001963, 96057, 39.39, 0.001190, 97853, 43.28],
    [0.002092, 95869, 38.46, 0.001296, 97737, 42.33],
    [0.002246, 95668, 37.54, 0.001413, 97610, 41.39],
    [0.002436, 95453, 36.62, 0.001549, 97472, 40.45],
    [0.002669, 95221, 35.71, 0.001706, 97321, 39.51],
    [0.002942, 94967, 34.81, 0.001881, 97155, 38.57],
    [0.003244, 94687, 33.91, 0.002069, 96972, 37.65],
    [0.003571, 94380, 33.02, 0.002270, 96772, 36.72],
    [0.003926, 94043, 32.13, 0.002486, 96552, 35.81],
    [0.004309, 93674, 31.26, 0.002716, 96312, 34.89],
    [0.004719, 93270, 30.39, 0.002960, 96050, 33.99],
    [0.005156, 92830, 29.53, 0.003226, 95766, 33.09],
    [0.005622, 92352, 28.68, 0.003505, 95457, 32.19],
    [0.006121, 91832, 27.84, 0.003779, 95123, 31.30],
    [0.006656, 91270, 27.01, 0.004040, 94763, 30.42],
    [0.007222, 90663, 26.19, 0.004301, 94380, 29.54],
    [0.007844, 90008, 25.38, 0.004592, 93974, 28.67],
    [0.008493, 89302, 24.57, 0.004920, 93543, 27.80],
    [0.009116, 88544, 23.78, 0.005266, 93083, 26.93],
    [0.009690, 87736, 22.99, 0.005630, 92592, 26.07],
    [0.010253, 86886, 22.21, 0.006028, 92071, 25.22],
    [0.010872, 85995, 21.44, 0.006479, 91516, 24.37],
    [0.011591, 85060, 20.67, 0.007001, 90923, 23.52],
    [0.012403, 84075, 19.90, 0.007602, 90287, 22.68],
    [0.013325, 83032, 19.15, 0.008294, 89600, 21.85],
    [0.014370, 81925, 18.40, 0.009082, 88857, 21.03],
    [0.015553, 80748, 17.66, 0.009990, 88050, 20.22],
    [0.016878, 79492, 16.93, 0.011005, 87171, 19.42],
    [0.018348, 78151, 16.21, 0.012097, 86211, 18.63],
    [0.019969, 76717, 15.51, 0.013261, 85168, 17.85],
    [0.021766, 75185, 14.81, 0.014529, 84039, 17.09],
    [0.023840, 73548, 14.13, 0.015991, 82818, 16.33],
    [0.026162, 71795, 13.47, 0.017662, 81494, 15.59],
    [0.028625, 69917, 12.81, 0.019486, 80054, 14.86],
    [0.031204, 67915, 12.18, 0.021467, 78494, 14.14],
    [0.033997, 65796, 11.55, 0.023658, 76809, 13.44],
    [0.037200, 63559, 10.94, 0.026223, 74992, 12.76],
    [0.040898, 61195, 10.34, 0.029159, 73026, 12.09],
    [0.045040, 58692, 9.76, 0.032331, 70896, 11.44],
    [0.049664, 56048, 9.20, 0.035725, 68604, 10.80],
    [0.054844, 53265, 8.66, 0.039469, 66153, 10.18],
    [0.060801, 50344, 8.13, 0.043828, 63542, 9.58],
    [0.067509, 47283, 7.62, 0.048896, 60757, 9.00],
    [0.074779, 44091, 7.14, 0.054577, 57786, 8.43],
    [0.082589, 40794, 6.68, 0.060909, 54633, 7.89],
    [0.091135, 37424, 6.23, 0.068019, 51305, 7.37],
    [0.100680, 34014, 5.81, 0.076054, 47815, 6.87],
    [0.111444, 30589, 5.40, 0.085148, 44179, 6.40],
    [0.123571, 27180, 5.02, 0.095395, 40417, 5.94],
    [0.137126, 23822, 4.65, 0.106857, 36561, 5.52],
    [0.152092, 20555, 4.31, 0.119557, 32655, 5.12],
    [0.168426, 17429, 4.00, 0.133502, 28751, 4.75],
    [0.186063, 14493, 3.70, 0.148685, 24912, 4.40],
    [0.204925, 11797, 3.44, 0.165088, 21208, 4.08],
    [0.224931, 9379, 3.19, 0.182685, 17707, 3.79],
    [0.245995, 7270, 2.97, 0.201442, 14472, 3.53],
    [0.266884, 5481, 2.78, 0.220406, 11557, 3.29],
    [0.287218, 4018, 2.61, 0.239273, 9010, 3.08],
    [0.306593, 2864, 2.46, 0.257714, 6854, 2.89],
    [0.324599, 1986, 2.33, 0.275376, 5088, 2.72],
    [0.340829, 1341, 2.21, 0.291899, 3687, 2.56],
    [0.357870, 884, 2.09, 0.309413, 2610, 2.41],
    [0.375764, 568, 1.98, 0.327978, 1803, 2.27],
    [0.394552, 354, 1.88, 0.347656, 1211, 2.13],
    [0.414280, 215, 1.77, 0.368516, 790, 2.00],
    [0.434993, 126, 1.68, 0.390627, 499, 1.87],
    [0.456743, 71, 1.58, 0.414064, 304, 1.75],
    [0.479580, 39, 1.49, 0.438908, 178, 1.64],
    [0.503559, 20, 1.40, 0.465243, 100, 1.53],
    [0.528737, 10, 1.32, 0.493157, 53, 1.43],
    [0.555174, 5, 1.24, 0.522747, 27, 1.33],
    [0.582933, 2, 1.16, 0.554111, 13, 1.23],
    [0.612080, 1, 1.09, 0.587358, 6, 1.14],
    [0.642683, 0, 1.02, 0.622599, 2, 1.06],
    [0.674818, 0, 0.95, 0.659955, 1, 0.98],
    [0.708559, 0, 0.89, 0.699553, 0, 0.90],
    [0.743986, 0, 0.82, 0.741526, 0, 0.83],
    [0.781186, 0, 0.76, 0.781186, 0, 0.76],
    [0.820245, 0, 0.71, 0.820245, 0, 0.71],
    [0.861257, 0, 0.65, 0.861257, 0, 0.65],
    [0.904320, 0, 0.60, 0.904320, 0, 0.60]
]

# Source: http://www.stats.gov.cn/tjsj/pcsj/rkpc/6rp/html/A0301a.htm
chinese_demographics = [
    [13786434, 7461199, 6325235],
    [15657955, 8574973, 7082982],
    [15617375, 8507697, 7109678],
    [15250805, 8272491, 6978314],
    [15220041, 8246206, 6973835],
    [14732137, 7988151, 6743986],
    [14804470, 8034452, 6770018],
    [13429161, 7292300, 6136861],
    [13666956, 7423559, 6243397],
    [14248825, 7726203, 6522622],
    [14454357, 7830808, 6623549],
    [13935714, 7522558, 6413156],
    [15399559, 8288987, 7110572],
    [15225032, 8161000, 7064032],
    [15893800, 8463924, 7429876],
    [18024484, 9524898, 8499586],
    [18790521, 9795181, 8995340],
    [20775369, 10760828, 10014541],
    [20755274, 10744556, 10010718],
    [21543466, 11079367, 10464099],
    [28026954, 14201091, 13825863],
    [26556649, 13357755, 13198894],
    [24474192, 12281148, 12193044],
    [25695955, 12876542, 12819413],
    [22658768, 11292037, 11366731],
    [19933683, 9969984, 9963699],
    [19709177, 9879292, 9829885],
    [19480836, 9801611, 9679225],
    [22322147, 11271599, 11050548],
    [19568009, 9914552, 9653457],
    [18928369, 9604727, 9323642],
    [19866458, 10141582, 9724876],
    [19474874, 9909833, 9565041],
    [18179478, 9289224, 8890254],
    [20689024, 10576456, 10112568],
    [21186516, 10817432, 10369084],
    [22906980, 11690644, 11216336],
    [23990208, 12283353, 11706855],
    [24730460, 12662559, 12067901],
    [25211795, 12937116, 12274679],
    [27397219, 13993123, 13404096],
    [24956297, 12723691, 12232606],
    [27032542, 13782610, 13249932],
    [21355748, 10856214, 10499534],
    [24012158, 12253040, 11759118],
    [23962574, 12252515, 11710059],
    [23355778, 11867147, 11488631],
    [26972157, 13803796, 13168361],
    [20075084, 10224798, 9850286],
    [11228960, 5628162, 5600798],
    [14097008, 7205176, 6891832],
    [12838832, 6624865, 6213967],
    [16617709, 8570000, 8047709],
    [18351980, 9422827, 8929153],
    [16847642, 8540366, 8307276],
    [17610528, 8973192, 8637336],
    [17738127, 8981235, 8756892],
    [16093888, 8099033, 7994855],
    [16167933, 8153588, 8014345],
    [13701998, 6875890, 6826108],
    [13618204, 6917026, 6701178],
    [13029125, 6690003, 6339122],
    [11276853, 5719180, 5557673],
    [10791633, 5492805, 5298828],
    [9951467, 5015412, 4936055],
    [9073411, 4564266, 4509145],
    [8640965, 4391409, 4249556],
    [7942141, 4003493, 3938648],
    [7740868, 3904424, 3836444],
    [7715897, 3884879, 3831018],
    [7389412, 3724605, 3664807],
    [6265718, 3116177, 3149541],
    [6893225, 3449237, 3443988],
    [6343869, 3149307, 3194562],
    [6080173, 2964127, 3116046],
    [5632477, 2690547, 2941930],
    [5175500, 2454168, 2721332],
    [5082383, 2420196, 2662187],
    [4254858, 1983724, 2271134],
    [3706915, 1730224, 1976691],
    [3737259, 1716514, 2020745],
    [2816693, 1257795, 1558898],
    [2757918, 1212683, 1545235],
    [2237138, 964710, 1272428],
    [1824190, 765800, 1058390],
    [1648160, 672819, 975341],
    [1344215, 530641, 813574],
    [1065276, 408984, 656292],
    [858879, 324282, 534597],
    [715398, 263084, 452314],
    [553805, 193982, 359823],
    [371079, 126484, 244595],
    [287676, 94157, 193519],
    [209291, 66717, 142574],
    [156456, 49532, 106924],
    [117522, 36268, 81254],
    [90889, 28664, 62225],
    [68648, 22045, 46603],
    [54689, 18355, 36334],
    [38231, 12384, 25847],
    [35934, 8852, 27082]
]

def period_life_table_for_sex(male):
    if male:
        return [l[0:3] for l in period_life_table]
    else:
        return [l[3:6] for l in period_life_table]

# Just a check to see if we got the math right
def check_period_life_table(plt):
    lives = plt[0][1]
    for [prob, left, exp] in plt:
        if round(lives) != left:
            print("Lives don't match: ", lives, left)
            sys.exit(1)
        lives = lives * (1 - prob)

check_period_life_table(period_life_table_for_sex(False))
check_period_life_table(period_life_table_for_sex(True))

def life_expectancy(plt):
    if len(plt) == 0:
        return 0
    return 1+(1-plt[0][0])*life_expectancy(plt[1:])

def adjust_period_life_table(plt, exponent):
    return [[l[0] ** exponent] for l in plt]

class Model:
    def __init__(self, plt, demo):
        self.plt = plt
        self.M = 900.0 #number of machines or capital
        self.year = 0
        #The value on position n represents the number of people of age n in society
        self.demo = demo

    def population(self):
        return sum(self.demo)

    def workers(self):
        return sum(self.demo[20:70])

    def old_population(self):
        return sum(self.demo[70:])

    def nonworkers(self):
        return self.population() - self.workers()

    def age_demography(self, healthcare_per_old_person):
        exponent = healthcare_per_old_person / 2.356230
        plt = adjust_period_life_table(self.plt, exponent)

        new_demo = [self.workers() / 50.0]
        for age in range(len(self.plt)):
            if age < len(self.demo):
                new_demo.append(self.demo[age] * (1-plt[age][0]))
        self.demo = new_demo
        return life_expectancy(plt)

    def step(self):
        L = self.workers()
        N = self.nonworkers()

        adv = self.year / 30.0

        O = ((1+adv)*L*self.M)**0.5 #workers get more qualified
        I = 0.3 * O
        #I = O*(1-(0.5*N+0.7*L)/(L+N)) #workers consume increases, GDP per capita represented by O/(L+N)

        self.M = 0.9*self.M+I   #depreciation 10%
        R = (((1+adv)*L*self.M)**0.5)/O #growth rate

        # investment in healthcare is 20%
        healthcare_per_old_person = 0.2 * O / self.old_population()
        print("healthcare: ", healthcare_per_old_person)
        LE = self.age_demography(healthcare_per_old_person)
        self.year += 1

        return (R, O, self.M, I, L, N, LE)

# We use the male PLT, which is already close to China's
# life expectancy of 75.2, and adjust it a little.
china_period_life_table = adjust_period_life_table(period_life_table_for_sex(True), 0.972)

demographics = [l[0]/1000000.0 for l in chinese_demographics]
#demographics = [10 for l in range(100)]
model = Model(china_period_life_table, demographics)

print (model.population(), "citizens")
print (model.workers(), "workers")
print (model.nonworkers(), "nonworkers")

growth_data = []
output_data = []
capital_data = []
investment_data = []
ratio_data = []
pop_data = []
le_data = []

#every year the demography shifts and the newborn dependent on workers
print ("Growth rate, Output, Capital, Investment, Ratio workers/nonworkers, Population, Life expectancy")
for i in range(0, 100):
    (R, O, M, I, L, N, LE) = model.step()
    pop = model.population()
    ratio = L/N
    print (int(R*1000), int(O), int(M), int(I) , int(ratio*100), int(pop), int(LE))
    growth_data.append(R)
    output_data.append(O)
    capital_data.append(M)
    investment_data.append(I)
    ratio_data.append(ratio)
    pop_data.append(pop)
    le_data.append(LE)
print ([int(x) for x in model.demo])

plt.subplot(6,1,1)
plt.plot(growth_data)
plt.ylabel("Growth rate")

plt.subplot(6,1,2)
plt.plot(output_data)
plt.ylabel("Output")

plt.subplot(6,1,3)
plt.plot(capital_data)
plt.ylabel("Capital")

plt.subplot(6,1,4)
plt.plot(ratio_data)
plt.ylabel("Ratio")

plt.subplot(6,1,5)
plt.plot(pop_data)
plt.ylabel("Population")

plt.subplot(6,1,6)
plt.plot(le_data)
plt.ylabel("Life expectancy")

plt.show()
